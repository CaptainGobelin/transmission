[gd_scene load_steps=12 format=1]

[ext_resource path="res://assets/ecran_ordi.png" type="Texture" id=1]
[ext_resource path="res://assets/fonts/computer_font_64.fnt" type="BitmapFont" id=2]
[ext_resource path="res://assets/new_theme.tres" type="Theme" id=3]
[ext_resource path="res://assets/fonts/computer_font_128.fnt" type="BitmapFont" id=4]
[ext_resource path="res://assets/cross_computer.png" type="Texture" id=5]

[sub_resource type="GDScript" id=1]

script/source = "extends Node2D

export(String, FILE) var json_path

signal correct_password_entered
signal notification_read


var dict = {}
var next_char = 0
var current_page = 0
var page_done = true
var text_to_show = \"\"
var text_array_to_show;
onready var area2D = get_node(\"Area2D\")
onready var choices = get_node(\"Choices\")
onready var text = get_node(\"Text\")
onready var password = get_node(\"Password\")
onready var password_input = get_node(\"PasswordInput\")
onready var timer = get_node(\"Timer\")
var is_choice_page = false
var prepare_signal = false

func _ready():
	var file = File.new()
	file.open(json_path, file.READ)
	var json_text = file.get_as_text()
	dict.parse_json(json_text)
	file.close()
	set_process_input(true)
	
	timer.connect(\"timeout\", self, \"show_next_char\")
	area2D.connect(\"input_event\", self, \"input_event\")
	self.connect(\"visibility_changed\", self, \"visibility_changed\")
	
	if dict.has(\"choices\"):
		choices.connect(\"button_selected\", self, \"choice_selected\")
		
		for c in dict[\"choices\"]:
			choices.add_button(\"\")
	
	reset()
	
	# TTEMPTEMPTEMPTEMPTEMPTEMPTEMPTEMPTEMPEMP
	self.connect(\"correct_password_entered\", self, \"damethod\")

func damethod():
	print(\"YO..\")

func show_next_char():
	if is_choice_page:
		show_next_choice_char()
	else:
		show_next_text_char()

func input_event(viewport, ev, shape_idx):
	if ev.type == InputEvent.MOUSE_BUTTON and ev.button_index == BUTTON_LEFT and ev.pressed:
		show_next_text_page()

func visibility_changed():
	if is_visible():
		reset()

func choice_selected(button_idx):
	#  noop if target empty
	if (dict[\"choices\"][button_idx][\"target\"].size() > 0):
		choices.hide()
		text.show()
		show_new_text(dict[\"choices\"][button_idx][\"target\"])

func reset():
	if dict.has(\"choices\"):
		choices.show()
		text.hide()
		password.hide()
		for i in range(choices.get_button_count()):
			choices.set_button_text(i, \"\")
		show_new_choices()
	elif dict.has(\"text\"):
		choices.hide()
		text.show()
		password.hide()
		show_new_text(dict[\"text\"])
	elif dict.has(\"password\"):
		choices.hide()
		text.hide()
		password.show()
		

func show_next_text_char():
	text.text += text_to_show[next_char]
	next_char += 1
	if next_char >= text_to_show.length():
		timer.stop()
		page_done = true

func show_new_text(new_text_array):
	is_choice_page = false
	current_page = 0
	text_array_to_show = new_text_array
	show_text_page(text_array_to_show[0])

func show_new_choices():
	is_choice_page = true
	show_choice_page()

func show_next_choice_char():
	var finished = true
	for i in range(dict[\"choices\"].size()):
		var label = dict[\"choices\"][i][\"label\"]
		if next_char >= label.length():
			continue
		var nc = label[next_char]
		choices.set_button_text(i, choices.get_button_text(i) + nc)
		finished = false
	
	next_char += 1
	
	if finished:
		timer.stop()
		page_done = true

func show_text_page(new_text):
	if new_text.substr(0, 7) == \"SIGNAL \":
		prepare_signal = true
		new_text.erase(0, 7)
	text.text = \"\"
	next_char = 0
	text_to_show = new_text
	timer.start()
	page_done = false

func show_choice_page():
	next_char = 0
	timer.start()
	page_done = false

func show_rest_of_page():
	var ret = false
	while not page_done:
		show_next_char()
		ret = true
	return ret

func show_next_text_page():
	if show_rest_of_page():
		return
	
	if current_page < text_array_to_show.size() - 1:
		current_page += 1
		show_text_page(text_array_to_show[current_page])
	else:
		reset()
"

[sub_resource type="StyleBoxFlat" id=3]

content_margin/left = -1.0
content_margin/right = -1.0
content_margin/top = -1.0
content_margin/bottom = -1.0
bg_color = Color( 0, 0, 0, 1 )
light_color = Color( 0, 0, 0, 1 )
dark_color = Color( 0, 0, 0, 1 )
border_size = 0
border_blend = true
draw_bg = true

[sub_resource type="RectangleShape2D" id=4]

custom_solver_bias = 0.0
extents = Vector2( 8.06276, 7.64236 )

[sub_resource type="GDScript" id=5]

script/source = "extends LineEdit

# class member variables go here, for example:
# var a = 2
# var b = \"textvar\"

onready var computer = get_node(\"../../\")

func _ready():
	# Called every time the node is added to the scene.
	# Initialization here
	pass


func _on_PasswordInput_text_entered( text ):
	if computer.dict[\"password\"][\"target\"].has(text.to_lower()):
		computer.emit_signal(\"correct_password_entered\")
	else:
		pass
"

[sub_resource type="Animation" id=6]

resource/name = "WrongPasswordAnim"
length = 1.0
loop = true
step = 0.1
tracks/0/type = "value"
tracks/0/path = NodePath(".:rect/pos")
tracks/0/interp = 1
tracks/0/imported = false
tracks/0/keys = {
"times": FloatArray( 0, 0.1, 0.2, 0.3 ),
"transitions": FloatArray( 1, 1, 1, 1 ),
"update": 0,
"values": [ Vector2( 689, 402 ), Vector2( 694, 402 ), Vector2( 687, 402 ), Vector2( 693, 402 ) ]
}

[sub_resource type="GDScript" id=2]

script/source = "extends LinkButton

onready var UI = get_node(\"..\")
onready var player = get_node(\"../../../Player\")

func _ready():
	self.connect(\"pressed\", self, \"close\")


func close():
	UI.hide()
	player.set_process_input(true)
	if UI.prepare_signal:
		UI.emit_signal(\"notification_read\")"

[node name="Computer" type="Node2D"]

script/script = SubResource( 1 )
json_path = "res://texts/Computer_0.json"

[node name="ColorFrame" type="ColorFrame" parent="."]

focus/ignore_mouse = true
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 2
margin/left = 0.0
margin/top = 0.0
margin/right = 1925.0
margin/bottom = 1078.0
color = Color( 0, 0, 0, 0.475412 )

[node name="Screen" type="Sprite" parent="."]

transform/pos = Vector2( 979.914, 540.381 )
transform/scale = Vector2( 0.788901, 0.871484 )
texture = ExtResource( 1 )

[node name="ScreenBackground" type="Panel" parent="."]

focus/ignore_mouse = true
focus/stop_mouse = false
size_flags/horizontal = 2
size_flags/vertical = 2
margin/left = 291.0
margin/top = 133.0
margin/right = 1711.0
margin/bottom = 967.0
custom_styles/panel = SubResource( 3 )

[node name="Area2D" type="Area2D" parent="."]

transform/pos = Vector2( 651.646, 780.793 )
transform/scale = Vector2( 8.52359, 6.69559 )
input/pickable = true
shapes/0/shape = SubResource( 4 )
shapes/0/transform = Matrix32( 10.6961, 0, 0, 8.76958, 39.0203, -35.5251 )
shapes/0/trigger = false
gravity_vec = Vector2( 0, 1 )
gravity = 98.0
linear_damp = 0.1
angular_damp = 1.0

[node name="CollisionShape2D" type="CollisionShape2D" parent="Area2D"]

transform/pos = Vector2( 39.0203, -35.5251 )
transform/scale = Vector2( 10.6961, 8.76958 )
shape = SubResource( 4 )
trigger = false
_update_shape_index = 0

[node name="Text" type="Label" parent="."]

visibility/opacity = 0.85
focus/ignore_mouse = true
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 0
margin/left = 319.0
margin/top = 147.0
margin/right = 1694.0
margin/bottom = 948.0
custom_fonts/font = ExtResource( 2 )
custom_colors/font_color = Color( 1, 1, 1, 1 )
autowrap = true
percent_visible = 1.0
lines_skipped = 0
max_lines_visible = -1

[node name="Timer" type="Timer" parent="."]

process_mode = 1
wait_time = 0.02
one_shot = false
autostart = false

[node name="PrevPage" type="Button" parent="."]

visibility/visible = false
focus/ignore_mouse = false
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 2
margin/left = 1059.0
margin/top = 263.0
margin/right = 1195.0
margin/bottom = 346.0
toggle_mode = false
enabled_focus_mode = 2
shortcut = null
flat = false

[node name="NextPage" type="Button" parent="."]

visibility/visible = false
focus/ignore_mouse = false
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 2
margin/left = 1059.0
margin/top = 570.0
margin/right = 1195.0
margin/bottom = 653.0
toggle_mode = false
enabled_focus_mode = 2
shortcut = null
flat = false

[node name="Choices" type="VButtonArray" parent="."]

focus/ignore_mouse = false
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 2
theme/theme = ExtResource( 3 )
margin/left = 303.0
margin/top = 148.0
margin/right = 1700.0
margin/bottom = 961.0
custom_colors/font_color_selected = Color( 0, 0, 0, 1 )
custom_colors/font_color = Color( 1, 1, 1, 1 )
flat = false
button/count = 0
button/min_button_size = -1.0
button/align = 0

[node name="Password" type="Node2D" parent="."]

editor/display_folded = true

[node name="PasswordLabel" type="Label" parent="Password"]

focus/ignore_mouse = true
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 0
margin/left = 779.0
margin/top = 496.0
margin/right = 1241.0
margin/bottom = 574.0
custom_fonts/font = ExtResource( 4 )
text = "PASSCODE"
align = 1
valign = 1
percent_visible = 1.0
lines_skipped = 0
max_lines_visible = -1

[node name="PasswordInput" type="LineEdit" parent="Password"]

focus/ignore_mouse = false
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 2
margin/left = 693.0
margin/top = 402.0
margin/right = 1407.0
margin/bottom = 471.0
placeholder/alpha = 0.6
focus_mode = 2
caret/caret_blink = false
caret/caret_blink_speed = 0.65
script/script = SubResource( 5 )

[node name="AnimationPlayer" type="AnimationPlayer" parent="Password/PasswordInput"]

playback/process_mode = 1
playback/default_blend_time = 0.0
root/root = NodePath("..")
anims/WrongPasswordAnim = SubResource( 6 )
playback/active = true
playback/speed = 1.0
blend_times = [  ]
autoplay = ""

[node name="LinkButton" type="LinkButton" parent="."]

focus/ignore_mouse = false
focus/stop_mouse = true
size_flags/horizontal = 2
size_flags/vertical = 2
margin/left = 1780.0
margin/top = 31.0
margin/right = 1875.0
margin/bottom = 124.0
toggle_mode = false
enabled_focus_mode = 0
shortcut = null
script/script = SubResource( 2 )

[node name="Sprite" type="Sprite" parent="LinkButton"]

texture = ExtResource( 5 )
centered = false

[connection signal="text_entered" from="Password/PasswordInput" to="Password/PasswordInput" method="_on_PasswordInput_text_entered"]


